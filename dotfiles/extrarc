# alias
alias ll="ls -alh --color=tty"

alias duh="du -h -d 0 [^.]* | sort -hr"

alias lcd="cd"
alias lvim="vim"
alias ltree="tree"
alias lrm="rm"
alias lgit="git"
alias lcat="cat"
alias lmv="mv"
alias lcp="cp"
alias l="ll"

alias gitcommit="git commit"
alias "cd-"="cd -"
alias gitst="git st"
alias gitadd="git add"

htops() {
  TERM=xterm htop -p $(pidof "$1" | tr ' ' ',')
}
alias htop=" TERM=xterm htop"

#
DOTFILES=$HOME/dotfiles
DOTFILES_LIB=$DOTFILES/lib

# using terminal emulator xterm with 256 color support
case "$TERM" in
  xterm)TERM=xterm-256color;;
esac

[[ -f ~/.LESS_TERMCAP ]] && . ~/.LESS_TERMCAP

if which ruby >/dev/null && which gem >/dev/null; then
    PATH="$(ruby -r rubygems -e 'puts Gem.user_dir')/bin:$PATH"
fi

# if [ -e $HOME/.gem/ruby/3.2.0/bin ]; then
#   export PATH=$HOME/.gem/ruby/3.2.0/bin:$PATH
# elif [ -e $HOME/.gem/ruby/3.1.0/bin ]; then
#   export PATH=$HOME/.gem/ruby/3.1.0/bin:$PATH
# elif [ -e $HOME/.gem/ruby/3.0.1/bin ]; then
#   export PATH=$HOME/.gem/ruby/3.0.1/bin:$PATH
# elif [ -e $HOME/.gem/ruby/3.0.0/bin ]; then
#   export PATH=$HOME/.gem/ruby/3.0.0/bin:$PATH
# elif [ -e $HOME/.gem/ruby/2.9.0/bin ]; then
#   export PATH=$HOME/.gem/ruby/2.9.0/bin:$PATH
# elif [ -e $HOME/.gem/ruby/2.8.0/bin ]; then
#   export PATH=$HOME/.gem/ruby/2.8.0/bin:$PATH
# elif [ -e $HOME/.gem/ruby/2.7.0/bin ]; then
#   export PATH=$HOME/.gem/ruby/2.7.0/bin:$PATH
# elif [ -e $HOME/.gem/ruby/2.6.0/bin ]; then
#   export PATH=$HOME/.gem/ruby/2.6.0/bin:$PATH
# elif [ -e $HOME/.gem/ruby/2.5.0/bin ]; then
#   export PATH=$HOME/.gem/ruby/2.5.0/bin:$PATH
# elif [ -e $HOME/.gem/ruby/2.4.0/bin ]; then
#   export PATH=$HOME/.gem/ruby/2.4.0/bin:$PATH
# fi

if [ -e $HOME/.npm-packages/bin ]; then
  export PATH=$PATH:$HOME/.npm-packages/bin
fi

if [ -e $HOME/.local/bin ]; then
  export PATH=$PATH:$HOME/.local/bin
fi

if [ -e $HOME/.cargo/bin ]; then
  export PATH="${HOME}/.cargo/bin:${PATH}"
fi

if [[ -e $HOME/bin ]]; then
  PATH=$HOME/bin:$PATH
fi

CABAL_PACKAGE_BIN=$HOME/.cabal/bin
if [[ -e $CABAL_PACKAGE_BIN ]]; then
  PATH=$CABAL_PACKAGE_BIN:$PATH
fi

if [[ ! -z NUMBER_OF_PROCESSORS ]]; then
  export NUMBER_OF_PROCESSORS=$(nproc --all)
fi

if [ -e "${HOME}/lib/pkgconfig" ]; then
  export PKG_CONFIG_PATH=${HOME}/lib/pkgconfig:${PKG_CONFIG_PATH}
fi

if [ -z "$LD_LIBRARY_PATH" ]; then
  export LD_LIBRARY_PATH
fi
# LD_LIBRARY_PATH=/usr/lib64:/usr/local/lib:$LD_LIBRARY_PATH
#
#
if [[ -e $HOME/.poetry/bin ]]; then
  PATH=$HOME/.poetry/bin:$PATH
fi

# CABAL_LIBS=~/.cabal/lib/x86_64-linux-ghc-8.0.2
# if [ -e $CABAL_LIBS ]; then
#   export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$CABAL_LIBS
# fi

if [ -z "$LIBRARY_PATH" ]; then
  export LIBRARY_PATH
fi
# LIBRARY_PATH=$CABAL_LIBS:$LIBRARY_PATH

# TMUX_COMPLETION=/usr/share/doc/tmux/examples/bash_completion_tmux.sh
# if [[ -e $TMUX_COMPLETION ]]; then
#   source $TMUX_COMPLETION
# fi

ALIAS_SRC="$HOME/sources/notes/aliasrc.sh"
if [ -f "${ALIAS_SRC}" ]; then
  source "${ALIAS_SRC}"
fi

# disable xterm ctrl+S XON XOFF signal
alias vim="stty stop '' -ixoff; vim -p "
if type nvim >/dev/null 2>&1; then
alias nvim="stty stop '' -ixoff; nvim -p "
export SP_EDITOR=nvim
else
export SP_EDITOR=vim
fi
alias vimnoplugin=" vim -u ~/.standardvimrc"

export EDITOR=$SP_EDITOR
export SYSTEMD_EDITOR=$SP_EDITOR
export VISUAL=$SP_EDITOR

alias nas540_mount="sshfs admin@192.168.0.6:/i-data/ $HOME/mount/nas540"
alias nas540_dl="cd $HOME/mount/nas540/0da29454/admin/download/Transmission/download"
alias nas540_tv="cd $HOME/mount/nas540/0da29454/video/tv"

sp_mount_fat() {
local dev_file="$1"
local mount_point="$2"

if [ ! -e "${dev_file}" ]; then
  echo "not existing: '${dev_file}'"
  return 1
fi

if [ ! -b "${dev_file}" ]; then
  echo "not a block device: '${dev_file}'"
  return 1
fi

if [ ! -e "${moint_point}" ]; then
  echo "not existing: '${mount_point}'"
  return 1
fi

if [ ! -d "${moint_point}" ]; then
  echo "not a directory: '${mount_point}'"
  return 1
fi

sudo mount "$dev_file" "$mount_point" -o user,rw,umask=111,dmask=000
}


# ===============================================
# ===============================================
# =_______________COMMANDS______________________=
# ===============================================

alias hna="~/dotfiles/lib/hn/spawn.sh"

#force ssh to use xterm when ssh instead of tmux-colour256
alias ssh='TERM=xterm ssh '

port_scan() {
which netstat 2>&1 > /dev/null
if [ $? -eq 0 ]; then
  # netstat -alnptu | grep -Ei 'Proto|LISTEN'
  netstat --tcp --udp --udplite --raw --listening --program --numeric
else
  # ss --all --listen --processes --tcp --udp --raw # | grep -Ei 'Proto|LISTEN'
  # -t: --tcp
  # -u: --udp
  # -n: --numeric?
  # -a: --all
  # -p: show pid
  ss -tuna -p | grep 'LISTEN'
  ss -tuna -p | grep 'udp'
fi
}

alias sp-space="du -hsc *"
alias sp_root="cd \`$DOTFILES_LIB/git_root.sh\`"

#tmux
# force the 256 colors compatibility
alias tmux='tmux -2'

# meta
alias sp-alias="$SP_EDITOR -p $ALIAS_SRC $DOTFILES/extrarc && source $DOTFILES/extrarc"
alias sp-zshrc="$SP_EDITOR -p $HOME/.zshrc $ALIAS_SRC $DOTFILES/extrarc $DOTFILES/workrc"
alias sp-workrc="$SP_EDITOR -p $HOME/dotfiles/workrc && source $DOTFILES/workrc"

alias sp-vimrc="$SP_EDITOR -p $HOME/.config/nvim/init.vim $HOME/.standardvimrc $HOME/.vim/colors/* $HOME/.vim/after/ftplugin/c.vim $HOME/.vim/plugged/vim-cpp-enhanced-highlight/after/syntax/cpp.vim $HOME/.vim/plugged/vim-cpp-enhanced-highlight/after/syntax/c.vim $HOME/.vim/plugged/tabline.vim/plugin/tabline.vim $HOME/.vimrc $HOME/.vim/coc-settings.json $HOME/.vim/plugged/vim-markdown/syntax/markdown.vim"
# alias sp-vimrc="$SP_EDITOR -p $HOME/.config/nvim/init.vim  $HOME/.standardvimrc $HOME/.vim/colors/* $HOME/.vim/plugged/vim-cpp-enhanced-highlight/after/syntax/cpp.vim $HOME/.vim/plugged/tabline.vim/plugin/tabline.vim $HOME/.vimrc /home/spooky/.config/nvim/plugged/chromatica.nvim/syntax/*"

#repeats $1
alias sp_repeat="~/dotfiles/lib/repeat.sh"
# alias sp_repeat_i="~/dotfiles/lib/repeati.sh"

mcd(){
  if [ ! -e $1 ]; then
    mkdir -p $1
  fi
  cd $1
}

sp_calc_generic(){
  if [ $# -lt 1 ]; then
    echo "$0: missing arg" 1>&2
    return 1
  fi
  if [ "${1}" = "python" ]; then
    local scratchpad_root="${HOME}/scratchpad"
    local file_type="py"
  else
    local scratchpad_root="${HOME}/scratchpad_${1}"
    local file_type="${1}"
  fi
  if [ ! -e "${scratchpad_root}" ]; then
    echo "$0: missing root: $scratchpad_root" 1>&2
    return 1
  fi
  if [ $# -eq 1 ]; then
    local codi_file="${scratchpad_root}/calc_$(date +'%Y_%m_%d').${file_type}"
    if [ ! -e "${codi_file}" ]; then
      cp "${scratchpad_root}/calc_template" "${codi_file}"
    fi
  else
    local codi_file="${2}"
  fi

  local kk="nvim -p '${codi_file}' -c '
  set scrollbind
  set cursorbind
  hi ColorColumn ctermbg=NONE
  hi VertSplit ctermbg=NONE
  hi NonText ctermfg=0
  Codi ${1}'"

  if type nix-shell >/dev/null 2>&1; then
  # if [ 0 -eq 1 ]; then
    local p="nix-shell -p python39Packages.numpy python39Packages.toolz python39Packages.scipy python39Packages.sympy python39Packages.matplotlib python39Packages.jedi python39Packages.jedi-language-server --run"
    echo $p $kk
    eval $p "\"$kk\""
  else
    eval $kk
  fi

  # set ft=codipython
  # set syntax=python
}

sp_calc(){
  sp_calc_generic "python" $@
}

sp_calc_js(){
  sp_calc_generic "javascript" $@
}

sp_nvim(){
  nix-shell -p python39Packages.numpy python39Packages.toolz python39Packages.scipy python39Packages.matplotlib python39Packages.jedi --run "nvim ${@}"
}

sp_calc_cpp() {
  local scratchpad_root=$HOME/scratchpad_cpp

  which cling 2>&1 > /dev/null
  if [ ! $? -eq 0 ]; then
    echo "missing cling" >&2
    return 1
  fi

  if [ $# -eq 0 ]; then
    local codi_file="${scratchpad_root}/calc_$(date +'%Y_%m_%d').cppx"
    if [ ! -e "${codi_file}" ]; then
      cp "${scratchpad_root}/calc_template" "${codi_file}"
    fi
  else
    local codi_file="${1}"
  fi

  nvim -p "${codi_file}" -c "
    set scrollbind
    set cursorbind
    hi ColorColumn ctermbg=NONE
    hi VertSplit ctermbg=NONE
    hi NonText ctermfg=0
    Codi cpp "
}

sp_plot() {
  nvim $HOME/scratchpad_plot/dt.py
}

alias sp-calc="cd $HOME/scratchpad"

# ===============================================
# =____________DEVELOPMENT______________________=
# ===============================================
alias cpp_extends="$HOME/dotfiles/lib/cpp_grep_extends.sh"
alias cpp_grep="$HOME/dotfiles/lib/cpp_grep_grep.sh"
alias cpp_funcall="$HOME/dotfiles/lib/cpp_grep_function_call.sh"
alias cpp_fundeclare="$HOME/dotfiles/lib/cpp_grep_function_declare.sh"
alias cpp_conscall="$HOME/dotfiles/lib/cpp_grep_constructor_call.sh"

alias gdb=" gdb --silent"
alias sp_gdb="$HOME/dotfiles/lib/tmuxgdb/tmuxgdb.sh"
alias sp_cmake_compile_db="cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1"

alias sp_cppcheck="cppcheck --enable=all --inconclusive --std=posix ."
alias sp_valgrind="valgrind --tool=memcheck --leak-check=full --track-origins=yes "

sp_setup_make_project(){
  # if clean slate
  if [ ! "$(ls -A ${PWD})" ]; then
    git init

    local test_DIR="test"
    local test_subdir_DIR="$test_DIR/subdir"
    local src_DIR="src"
    local src_subdir_DIR="$src_DIR/subdir"
    local external_DIR="external"
    local directories=($test_subdir_DIR $external_DIR $src_subdir_DIR)
    for DIR in "${directories[@]}"
    do
      if [ ! -e $DIR ]; then
        mkdir -p $DIR
      fi
      # touch $DIR/README.md
    done

    cp $CPP_EXAMPLE_MAKEFILE .
    cp $CPP_EXAMPLE_TEST_MAKEFILE $test_DIR/Makefile
    cp "$CPP_STUB/.gitignore" .
    cp "$CPP_STUB/app.h" $src_subdir_DIR
    cp "$CPP_STUB/app.cpp" $src_subdir_DIR
    cp "$CPP_STUB/main.cpp" $src_DIR
    cp "$CPP_STUB/AppTest.cpp" $test_subdir_DIR
    cp "$CPP_STUB/tests.cpp" $test_DIR
    cp "$CPP_STUB/TESTMARKER" $test_DIR
    cp $HOME/.clang-format .

    ln -s src include

    cd $external_DIR
    git submodule add https://github.com/google/googletest.git
    cd -

    git add .
    git commit -m "Initial Commit"
  fi
  setup_meta

  make -j
  make test -j
}


# makex() {
#   local pathpat="(/[^/]*)+:[0-9]+"
#   local ccred=$(echo -e "\033[0;31m")
#   local ccyellow=$(echo -e "\033[0;33m")
#   local ccend=$(echo -e "\033[0m")
#
#   make "$@" 2>&1 | sed -E -e "/[Ee]rror[: ]/ s%$pathpat%$ccred&$ccend%g" -e "/[Ww]arning[: ]/ s%$pathpat%$ccyellow&$ccend%g" | less -RiN -p error
#
#   return ${PIPESTATUS[0]}
# }

sp_perf_report(){
  perf report -n --stdio
}

sp_perf(){
  perf record -F 99 -- $@
  # spperf_report
}

print_clipboard() {
  echo "xclip -o -selection primary  : '$(xclip -o -selection primary 2>&1)'"
  echo "xclip -o -selection secondary: '$(xclip -o -selection secondary 2>&1)'"
  echo "xclip -o -selection clipboard: '$(xclip -o -selection clipboard 2>&1)'"
  echo ""
  echo "xsel -o --primary  : $(xsel -o --primary 2>&1)"
  echo "xsel -o --secondary: $(xsel -o --secondary 2>&1)"
  echo "xsel -o --clipboard: $(xsel -o --clipboard 2>&1)"
}

# watch files system for changes and reload
alias make_loop="$HOME/dotfiles/lib/entr_cpp.sh $HOME/dotfiles/lib/make_body.sh"
alias test_loop="$HOME/dotfiles/lib/entr_cpp.sh $HOME/dotfiles/lib/make_test_body.sh test ./test/thetest"
# sp_entr(){
#   //....
#   sp_has_feature "entr"
#   if [ $? -eq 0 ]; then
#     cat $TEMP_file | entr $BODY $ARG
#   else
#     cat $TEMP_file | $HOME/dotfiles/lib/timestamp_make.sh $BODY $ARG
#   fi
#
# }
# alias cpp_change_loop="$HOME/dotfiles/lib/entr_cpp.sh "

# sp_ag() {
#   ag "$1" --cpp --ignore "external"
# }

sp_cryptocurrency(){
  local COIN="$1"
  local HOURS="$2"
  local HEADER="$3"

  local CLIENT="bitcoin-chart-cli"
  sp_has_feature $CLIENT
  if [ ! $? -eq 0 ]; then
    echo "error missing: $CLIENT"
    echo "npm install $CLIENT -g"
    return 1
  fi
  local SP_TEMP="`mktemp /tmp/tmp-XXXXX`"

  local COLLECT="$CLIENT --coin $COIN --hours $HOURS --width 127 --height 32 > $SP_TEMP "
  local PRESENT="echo $COIN && cat $SP_TEMP"
  local COMMAND="$COLLECT && clear && $PRESENT && sleep 25"
  # echo $COMMAND

  sp_repeat $COMMAND

# bitcoin-chart-cli --coin BTC --hours 16 --height 65 --width 250
}

sp_bitcoin(){
  sp_cryptocurrency "BTC" "12"
}

sp_eth(){
  sp_cryptocurrency "ETH" "12"
}

sp_ltc(){
  sp_cryptocurrency "LTC" "12"
}

alias sp_bitcoin_table="coinmon"


goto_pid() {
  if [ $# -lt 1 ]; then
    echo "Missing pid argument" 1>&2
    return 1
  fi
  local proc="/proc/${1}"
  if [ ! -e "${proc}" ]; then
    echo "Process for pid: '${1}' is not running" 1>&2
    return 2
  fi
  local tmux_pane="$(cat ${proc}/environ | tr '\0' '\n' | grep '^TMUX_PANE=')"
  if [ ! $? -eq 0 ]; then
    echo "Process not opened in tmux" 1>&2
    return 3
  fi

  if [[ ! "${tmux_pane}" =~ '^TMUX_PANE=(.+)' ]]; then
    echo "???? ${tmux_pane}" 1>&2
    return 4
  fi
  local pane="${match[1]}"

  local tmp="$(tmux list-panes -a | grep ${pane})"
  if [ ! $? -eq 0 ]; then
    echo "pane: '${pane}' not found" 1>&2
    return 5
  fi

  if [[ ! "${tmp}" =~ '^#:([0-9]+)\.([0-9]+)' ]]; then
    echo "!!! ${tmp}" 1>&2
    return 6
  fi

  tmux select-window -t "${match[1]}" && tmux select-pane -t "${match[2]}"
}

# vim: set ft=zsh:
