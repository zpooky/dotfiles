#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# pip3 install --user scipy --upgrade
# pip3 install --user numpy --upgrade
# pip3 install --user matplotlib --upgrade

##=Raw================
# hex:    0xDEADBEEF
# to hex: hex(number)

# binary: 0b1011_1111
# to bin: bin(number)

#   size of type: var.bit_length()
# number 1₂ bits: var.bit_count()
#            ALT: bin(var).count('1')

# octet:  0100

# char -> raw: ord('a')
# raw -> char: chr(97)

# Math functions
# math.log(x)
# xor(x,y)

# hex encoded -> utf8 string
# bytearray.fromhex(hex).decode('utf-8')
# hex encoded -> raw
# binascii.unhexlify(hex)

# base64
# e = base64.b64encode(b'...')
# p = base64.b64decode(e)

# urlencode
# e = urllib.parse.quote(p)
# p = urllib.parse.unquote(e)
# dict = urllib.parse.parse_qs(p)
# e = urllib.parse.urlencode(dict)

# sha256
# m = hashlib.sha256()
# m.update(binascii.unhexlify(""))
# m.hexdigest()/m.digest()

# random
# hex(random.getrandbits(32))
# random.randint(1, 10)

# json
# dict = json.loads(str)
# str = json.dumps(dict)

# string hex
# bytes.fromhex(hex_str).decode('utf-8')

# protocol: RTP (pip install --user rtp)
# rtp = RTP().fromBytes(binascii.unhexlify(hex))  # decode

# socket.ntohl()
# ===================

import sys
import math
import binascii
import hashlib
import random
from operator import xor
import numpy as np
import scipy
import matplotlib.pyplot as plt
import socket
import base64
import urllib
import urllib.parse
import time
import json

sys.version
sys.setrecursionlimit(1500)

k = 1000.
M = k*k
m = 1./1000.
μ = 1./(1000.*1000.)
π=np.pi
π2=π*2.

def mod_exp(b, e, m):
  """
  https://github.com/csknk/fast-modular-exponentiation/blob/master/python/main.py
  bᵉ (mod m)
  """
  r = 1
  if 1 & e:
    r = b
  while e:
    e >>= 1
    b = (b * b) % m
    if e & 1: r = (r * b) % m
  return r

def gcd(a, b):
  if b == 0:
    return a
  else:
    return gcd(b, a%b)

def deg2rad(deg):
  return deg*(np.pi/180.)

def rad2deg(rad):
  return rad*(180./np.pi)

def sigma(x, f):
  """
                N
  sigma(x, f) = ∑ f(xᵢ)
               i=0
  sigma(x, lambda xᵢ: xᵢ)
  """
  return functools.reduce(lambda value,elem: value+f(elem), x, 0)

def mean(x):
  """
  x̄ = mean(x)
  """
  return (1./len(x))*sigma(x, lambda x: x)

