##reference
# leader = ctrl+space
#
# prefix+r      | reload tmux configuration
##pane
# prefix "      | vertical split
# prefix %      | horizontal split
# ctrl hjkl     | split navigation

# ctrl+d        | to kill current split
# prefix + x    |

#
##window
# ctrl+t        | create window
# shift+up/dw   | window navigation
# prefix+N      | switch to window N
#
##visual mode
# prefix v      | enter visual mode
#               | vim style navigation
# y             | in visual mode yank
##
# prefix+k      | clear text rigth
# prefix+u      | clear text left
# prefix+l      | clear screen

# prefix+alt-5  | retile all active panes

# tmux list-keys | list key bindings

# prefix s       | *tree view* (panes/windows/sessions)

# disable rotate panes (tmux rotate-window)
unbind-key -T prefix C-o
unbind-key -T prefix M-o

# TODO ctrl+å to go into visual
# bind-key -n 'C-å'  copy-mode

# to make cygwin work with #{pane_current_path}
set-environment -g CHERE_INVOKING 1

# (ctrl+space) is the prefix
set -g prefix C-Space

if-shell '[[ $(uname -s) =~ CYGWIN_.* ]]' 'set-option -g default-shell /usr/bin/zsh'

# set-window-option : alias(setw)
# set-option -g     : set session global options

# address vim mode switching delay (http://superuser.com/a/252717/65504)
set -s escape-time 0

# Start windows and panes at 1, not 0
set -g base-index 1
setw -g pane-base-index 1

# tmux windows are renamed to have consistent numbering
set-option -g renumber-windows on

# terminal {
# alacritty {{
# if-shell '[[ "${TERM}" = "alacritty" ]]' "set -as terminal-overrides ',alacritty:RGB'" # true-color support
# if-shell '[[ "${TERM}" = "alacritty" ]]' "set -as terminal-overrides ',*:Setulc=\E[58::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&%d::%p1%{255}%&%d%;m'"
set -as terminal-overrides ',alacritty:RGB'
set -as terminal-overrides ',*:Setulc=\E[58::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&%d::%p1%{255}%&%d%;m'
# }} else {{
# 256 color support
# set -g default-terminal "tmux-256color"

# truecolor support
# https://gist.github.com/XVilka/8346728
if-shell '[[ "${TERM}" = "xterm-256color" ]]' 'set-option -ga terminal-overrides ,xterm-256color:Tc'
# if-shell '[[ "${TERM}" = "alacritty" ]]' 'set-option -ga terminal-overrides ,alacritty:Tc'

#
# set -ga terminal-overrides ',xterm-256color:Tc'
# set -g default-terminal "alacritty"
# set -ga terminal-overrides ',alacritty:Tc'

# }}
# }

#
set-option -g xterm-keys on
set -g xterm-keys on
set-window-option -g xterm-keys on

# status bar
set -g status on

# if-shell "if [ -e '/usr/local/lib/python2.7/dist-packages/powerline/bindings/tmux/powerline.conf' ] && [ -n ${DISPLAY} ]; then true; else false; fi" \
#     'source /usr/local/lib/python2.7/dist-packages/powerline/bindings/tmux/powerline.conf'

# if-shell "if [ -e '/usr/lib/python3.6/site-packages/powerline/bindings/tmux/powerline.conf' ] && [ -n ${DISPLAY} ]; then true; else false; fi" \
#     'source /usr/lib/python3.6/site-packages/powerline/bindings/tmux/powerline.conf'

# if-shell "if [ -e '/usr/lib/python3.7/site-packages/powerline/bindings/tmux/powerline.conf' ] && [ -n ${DISPLAY} ]; then true; else false; fi" \
#     'source /usr/lib/python3.7/site-packages/powerline/bindings/tmux/powerline.conf'

# if-shell "if [ $(uname -s) =~ CYGWIN_.* ] || [ -z ${DISPLAY} ]; then true; else false; fi" \
#     "set -g status-style 'bg=#252526,fg=white,bold'; \
#     set -g status-left-length 40; \
#     set -g status-left '#[fg=yellow,bold]#S § '; \
#     set -g status-right '#{prefix_highlight} #[fg=yellow,bold]§ #[fg=white]week(%V) %Y-%m-%d %H:%M:%S';\
#     set -w -g window-status-current-bg red"

set -g status-style 'bg=#252526,fg=white,bold'
set -g status-left-length 40
set -g status-left '#[fg=yellow,bold]#S § '
set -g status-right '#{prefix_highlight} #[fg=yellow,bold]§ #[fg=white]week(%V) %Y-%m-%d %H:%M'
set -w -g window-status-current-style bg=red

# #[fg=yellow,bold]#T | #[fg=magenta,bg=#373b41]%H:%M

# send focus event to pane
set -g focus-events on

#grey out unfocused split
set -g window-style 'fg=colour247,bg=#252526'
set -g window-active-style 'fg=colour250,bg=black'

# status refresh interval
set -g status-interval 59

set-option -g automatic-rename on
set-option -g automatic-rename-format '#{b:pane_current_path}'

if-shell '[[ $(whoami) =~ fredriol ]]' "set-window-option -g window-status-current-format '#(eval ~/dotfiles/lib/tmux_window_status_format.sh `tmux display -p \"#{pane_current_path}\"`)'"
if-shell '[[ $(whoami) =~ fredriol ]]' "set-window-option -g window-status-format '#(eval ~/dotfiles/lib/tmux_window_status_format.sh `tmux display -p \"#{pane_current_path}\"`)'"

# format for current window tab name
if-shell '[[ ! $(whoami) =~ fredriol ]]' "set-window-option -g window-status-current-format '#[fg=yellow,bold]#I#[fg=white]:#W#{?window_zoomed_flag,+Z,}'"
if-shell '[[ ! $(whoami) =~ fredriol ]]' "set-window-option -g window-status-format '#[fg=yellow,bold]#I#[fg=white]:#W#{?window_zoomed_flag,+Z,}'"

# Show bells in window titles.TODO
# set -g window-status-bell-style fg=yellow,bold,underscore

# (ctrl+t) to create new window in same directory
bind -n 'C-t' new-window -c "#{pane_current_path}"
bind -n 'C-T' new-window -c "#{pane_current_path}"
if-shell '[[ $(whoami) =~ nix-on-droid ]]' "bind -n § send-keys Escape"

# allow us to create new window in copy-mode
bind-key -T copy-mode-vi 'C-T' new-window -c "#{pane_current_path}"
bind-key -T copy-mode-vi 'C-t' new-window -c "#{pane_current_path}"

# Split vertical
bind % split-window -h -c "#{pane_current_path}"
# Split horizontal
bind '"' split-window -v -c "#{pane_current_path}"

# shift up/down navigate between windows
bind -n S-Down next-window
bind-key -T copy-mode-vi S-Down next-window
bind -n S-Up previous-window
bind-key -T copy-mode-vi S-Up previous-window

# control+shift up/down to move window left/right
bind -n 'C-S-Up'   swap-window -d -t -1
bind -n 'C-S-Down' swap-window -d -t +1

bind o last-window
# <leader>; last-pane

#-------- Copy Mode (Vim Style) {{{
# https://github.com/gotbletu/shownotes/blob/master/tmux_2.4_copy_mode_vim.md
# enable vim copy mode
set-option -g status-keys vi
set-window-option -g mode-keys vi

# enter copy mode:
bind-key v        copy-mode # prefix+v
bind-key -n 'C-b' copy-mode # ctrl+b

bind-key P choose-buffer      # select from clipboard history

# not in select mode
# bind-key -T copy-mode-vi 'C-Left' send -X previous-word
# bind-key -T copy-mode-vi 'C-Right' send -X next-word
bind-key -T copy-mode-vi H send-keys -X start-of-line
bind-key -T copy-mode-vi L send-keys -X end-of-line

# escape will exit vi mode
bind-key -T copy-mode-vi 'Escape' send -X cancel

bind-key -T copy-mode-vi 'v' send -X begin-selection  # visual select
bind-key -T copy-mode-vi 'V' send-keys -X select-line # visual select line

bind-key -T copy-mode-vi 'C-v' send-keys -X rectangle-toggle  # toggle between block and line block visual select
bind-key -T choice-mode-vi 'h' send-keys -X tree-collapse     # visual move left
bind-key -T choice-mode-vi 'l' send-keys -X tree-expand       # visual move right
bind-key -T choice-mode-vi 'H' send-keys -X tree-collapse-all # visual move to max left
bind-key -T choice-mode-vi 'L' send-keys -X tree-expand-all   # visual move to min right

# vim-tmux-plugin for some reason does not set navigation keys in visual mode
bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R

# Clipboard support when a display is detected
# if-shell '[[ -n ${DISPLAY} || $(uname -s) =~ CYGWIN_.* ]]' 'source-file ~/.tmux_clipboard.conf'

# enter copy mode on scroll wheel
bind -n WheelUpPane if-shell -F -t = "#{mouse_any_flag}" "send-keys -M" "if -Ft= '#{pane_in_mode}' 'send-keys -M' 'copy-mode -e; send-keys -M'"

#}}}

# refresh conf (prefix+r)
bind-key r source-file ~/.tmux.conf

# toggle between last pane
bind-key space last-pane

# prefix+/ to search upwards
# bind-key / copy-mode \; send-key ?

# bind-key -n 'C-b' copy-mode\; send-keys -X search-backward '窷'
# bind-key -n 'C-u' copy-mode\; send-keys -X search-backward '窷'

# forward (ctrl+l) using (prefix+l) to clear history
bind l send-keys 'C-l' \; run-shell "sleep .3s" \; clear-history
# forward ctrl+k using (prefix+k)
bind k send-keys 'C-k'
# forward ctrl+u using (prefix+u)
bind u send-keys 'C-u'

# open horizontal pane
bind-key -T prefix ¤ split-window -v -c "#{pane_current_path}"\; resize-pane -y 5

# mouse support
set -g mouse on

# size of history
set -g history-limit 30000

#override default pane width
set -w -g main-pane-width 85

# Don't wrap searches
set -w -g wrap-search off

# set -g set-titles on
# set -g set-titles-string '#T'

# Disable green bar separator
set -g pane-active-border-style fg=white

# plugin: prefix highlight
set -g @prefix_highlight_fg 'colour231'
set -g @prefix_highlight_bg 'colour04'
set -g @prefix_highlight_output_prefix ''
set -g @prefix_highlight_output_suffix ''
set -g @prefix_highlight_show_copy_mode 'on'
set -g @prefix_highlight_copy_mode_attr 'fg=black,bg=yellow'

# List of plugins
# {
# support vim like split navigation <ctrl+direction key>
set -g @plugin 'christoomey/vim-tmux-navigator'
# }

# regex search {
set -g @plugin 'tmux-plugins/tmux-copycat'
# }

# {
set -g @plugin 'tmux-plugins/tmux-prefix-highlight'
# }

# {
# bind-key -T prefix p paste-buffer
bind-key p run-shell "xsel -o --clipboard | tmux load-buffer - ; tmux paste-buffer -p"
if-shell '[[ $(whoami) =~ nix-on-droid ]]' "bind-key -T copy-mode-vi y send-keys -X copy-selection-and-cancel"

if-shell '[[ "$(uname --kernel-version)" =~ "Microsoft" ]]' "win32yank -o | tmux load-buffer - ; tmux paste-buffer"
if-shell '[[ "$(uname --kernel-version)" =~ "Microsoft" ]]' "set -g @custom_copy_command 'win32yank'"
# set -g @custom_copy_command 'xclip'

# normal mode:
# <prefix-y> - copies text from command line
# <prefix-Y> - copies cwd

# copy mode:
# <prefix+y> - copy
# <prefix+Y> - copy & paste to command line
set -g @plugin 'tmux-plugins/tmux-yank'
set -g @yank_selection 'clipboard' # or 'secondary' or 'primary'
# set -g @override_copy_command 'my-clipboard-copy --some-arg'
# }

# {
# in finger mode color yank code red
set -g @fingers-hint-format '#[fg=red,bold]%s'

# note: keep '-' at the end of []
set -g @fingers-pattern-0 "(file:[\/]+|~|\/(sys|home|bin|boot|dev|etc|lib|media|mnt|opt|proc|root|tmp|var|usr|nix|run|))(\/[a-zA-Z0-9_.+-]\+)\+"
# ipv4:port
set -g @fingers-pattern-1 "(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]):((([0-9]|[1-8][0-9]|9[0-9]|[1-8][0-9]{2}|9[0-8][0-9]|99[0-9]|[1-8][0-9]{3}|9[0-8][0-9]{2}|99[0-8][0-9]|999[0-9]|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-6]))|ftp)"
# simple email
set -g @fingers-pattern-2 "[a-zA-Z0-9_.+-]{3,}@[a-zA-Z0-9-]{3,}\.(com|co.uk|org|uk|edu|us|gg|wtf|io|it|de|ch)"
# hex encoded
set -g @fingers-pattern-3 "[a-fA-F0-9]{20,}"
# #include <wasd/wasd.h>
set -g @fingers-pattern-4 "#include <[a-zA-Z0-9\/\._-]+>"
# hex encoded byte separated with :
set -g @fingers-pattern-5 "[a-fA-F0-9]{2}(:[a-fA-F0-9]{2}){5,}"
# gerrit change id
set -g @fingers-pattern-6 "Change-Id: I[a-fA-F0-9]{20,}"
set -g @fingers-pattern-7 "Depends-On: I[a-fA-F0-9]{20,}"
# patch file
set -g @fingers-pattern-8 "[0-9]{4}-[a-zA-Z0-9\._-]+\.patch"
# process ID: 2257802 (STILL RUNNING)
set -g @fingers-pattern-9 "process ID: [0-9]+"

set -g @plugin 'Morantron/tmux-fingers'
# }

# save window layouts and working directories {
# <prefix+Ctrl-s> - save
# <prefix+Ctrl-r> - restore

# resume from session file
# set -g @resurrect-strategy-vim 'session'
# set -g @resurrect-strategy-nvim 'session'

# set -g @plugin 'tmux-plugins/tmux-resurrect'
# }

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
# <prefix+U> list&update plugins
# https://github.com/tmux-plugins/tpm
run '~/.tmux/plugins/tpm/tpm'
